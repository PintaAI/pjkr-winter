// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PESERTA
  PANITIA
}

enum UserPlan {
  FREE
  PRO
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?
  emailVerified        DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(PESERTA)
  plan                  UserPlan  @default(FREE)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  alamat                String?
  telepon               String?
  ukuranBaju            String?   // Ukuran pakaian (S/M/L/XL/XXL atau custom)
  ukuranSepatu          String?   // Ukuran sepatu (250-275 atau custom)
  
  // Relasi yang sudah ada
  accounts Account[]
  sessions Session[]

  // Relasi baru
  tiket   Ticket[]
  sewaan  Rental[]
  bus     Bus?     @relation(fields: [busId], references: [id])
  busId   String?
  status  StatusPeserta[] // Relasi dengan status peserta
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model Tiket
model Ticket {
  id          String     @id @default(cuid())
  tipe        String     // Mengubah dari enum ke string untuk fleksibilitas
  harga       Float
  description String     @default("") 
  features    String[]   @default([])
  
  // Relasi dengan peserta
  peserta     User       @relation(fields: [pesertaId], references: [id])
  pesertaId   String
}

// Model Sewa
model Rental {
  id          String     @id @default(cuid())
  namaBarang  String
  hargaSewa   Float
  items       String[]   @default([])
  
  // Relasi dengan peserta
  peserta     User       @relation(fields: [pesertaId], references: [id])
  pesertaId   String
}

// Model Bus
model Bus {
  id        String  @id @default(cuid())
  namaBus   String
  kapasitas Int     @default(40)
  
  // Relasi dengan peserta
  peserta   User[]
}

// Model Status Peserta (Dinamis)
model StatusPeserta {
  id          String    @id @default(cuid())
  nama        String    // Nama status (misal: "Absen Keberangkatan", "Terima Peralatan", dll)
  nilai       Boolean   @default(false)  // Nilai status (true/false)
  tanggal     DateTime? // Waktu status diubah
  keterangan  String?   // Keterangan tambahan jika diperlukan
  
  // Relasi dengan peserta
  peserta     User      @relation(fields: [pesertaId], references: [id])
  pesertaId   String
}
