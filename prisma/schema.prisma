// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserPlan {
  FREE
  PRO
}

// Enum untuk jenis tiket
enum TicketType {
  REGULAR
  LIFT_GONDOLA
}

// Enum untuk tipe bus
enum BusType {
  BUS_1
  BUS_2
  BUS_3
}

// Enum untuk jenis sewa
enum RentalType {
  EQUIPMENT_FULLSET
  CLOTHING_FULLSET
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  plan          UserPlan  @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  alamat        String?
  telepon       String?
  isPanitia     Boolean   @default(false)

  // Relasi yang sudah ada
  accounts Account[]
  sessions Session[]

  // Relasi baru
  tiket   Ticket[]
  sewaan  Rental[]
  bus     Bus?     @relation(fields: [busId], references: [id])
  busId   String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model Tiket
model Ticket {
  id        String     @id @default(cuid())
  tipe      TicketType @default(REGULAR)
  harga     Float
  
  // Relasi dengan peserta
  peserta   User       @relation(fields: [pesertaId], references: [id])
  pesertaId String
}

// Model Sewa
model Rental {
  id          String     @id @default(cuid())
  tipe        RentalType
  namaBarang  String     // Menambahkan field namaBarang
  hargaSewa   Float
  
  // Relasi dengan peserta
  peserta     User       @relation(fields: [pesertaId], references: [id])
  pesertaId   String
}

// Model Bus
model Bus {
  id        String  @id @default(cuid())
  namaBus   String
  tipe      BusType @unique
  harga     Float
  kapasitas Int     @default(40)
  
  // Relasi dengan peserta
  peserta   User[]
}
